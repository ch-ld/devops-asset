version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: devops-asset-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-devops_asset}
      MYSQL_USER: ${MYSQL_USER:-devops}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-devopspassword}
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --max_allowed_packet=128M
      --sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"
    networks:
      - devops-net
    profiles:
      - production
      - development
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 30s

  # Redis缓存服务
  redis:
    image: redis:7.0-alpine
    container_name: devops-asset-redis
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redispassword}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - devops-net
    profiles:
      - production
      - development
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s

  # 后端服务
  server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile
      target: production
    container_name: devops-asset-server
    restart: unless-stopped
    environment:
      APP_MODE: ${APP_MODE:-prod}
      APP_PORT: 8080
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: ${MYSQL_USER:-devops}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-devopspassword}
      MYSQL_DB: ${MYSQL_DATABASE:-devops_asset}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      AES_KEY: ${AES_KEY:-your_aes_key_32_characters_long!}
      TZ: Asia/Shanghai
    volumes:
      - ./server/log:/app/log
      - ./server/configs:/app/configs
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devops-net
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s

  # 前端服务（生产环境）
  web:
    build:
      context: ./web
      dockerfile: ../docker/Dockerfile.frontend
      target: production
    container_name: devops-asset-web
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    volumes:
      - web_dist:/usr/share/nginx/html
    networks:
      - devops-net
    profiles:
      - production

  # Nginx反向代理
  nginx:
    image: nginx:1.24-alpine
    container_name: devops-asset-nginx
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - web_dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - server
      - web
    networks:
      - devops-net
    profiles:
      - production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 5s
      retries: 3
      interval: 30s

  # 开发环境后端服务
  server-dev:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile
      target: development
    container_name: devops-asset-server-dev
    restart: unless-stopped
    environment:
      APP_MODE: dev
      APP_PORT: 8080
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: ${MYSQL_USER:-devops}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-devopspassword}
      MYSQL_DB: ${MYSQL_DATABASE:-devops_asset}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      AES_KEY: ${AES_KEY:-dev_aes_key_32_characters_long!!}
      TZ: Asia/Shanghai
    volumes:
      - ./server:/app
      - go_mod_cache:/go/pkg/mod
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devops-net
    profiles:
      - development
    command: >
      sh -c "
        go mod download &&
        go run cmd/main.go --migrate &&
        air -c .air.toml
      "

  # 开发环境前端服务
  web-dev:
    build:
      context: ./web
      dockerfile: ../docker/Dockerfile.frontend
      target: development
    container_name: devops-asset-web-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      TZ: Asia/Shanghai
    volumes:
      - ./web:/app
      - node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - devops-net
    profiles:
      - development
    command: >
      sh -c "
        pnpm install &&
        pnpm run dev --host 0.0.0.0
      "

# 网络配置
networks:
  devops-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  web_dist:
    driver: local
  nginx_logs:
    driver: local
  go_mod_cache:
    driver: local
  node_modules:
    driver: local 
